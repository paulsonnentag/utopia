(ns utopia.examples.source)


(def todo "(require [datascript.core :as d]\n         [reagent.core :as r]\n         [posh.reagent :as p])\n\n;; UTILS\n\n(defn timestamp []\n  (.getTime (js/Date.)))\n\n\n;; DATABASE\n\n(def schema\n  {:todo/description     {:db/cardinality :db.cardinality/one}\n   :todo/is-completed    {:db/cardinality :db.cardinality/one}\n   :todo/is-being-edited {:db/cardinality :db.cardinality/one}\n   :todo/creation-date   {:db/cardinality :db.cardinality/one}})\n\n(def initial-facts [{:todo/description   \"go shopping\"\n                     :todo/is-completed  true\n                     :todo/creation-date (timestamp)}\n                    {:todo/description   \"clean kitchen\"\n                     :todo/creation-date (timestamp)}\n                    {:todo/description   \"walk the dog\"\n                     :todo/creation-date (timestamp)}])\n\n(defonce conn (d/create-conn schema))\n\n(p/posh! conn)\n\n\n;; ACTIONS\n\n(defn delete-todo [conn])\n\n(defn update-todo-status [conn todo-id is-completed]\n  (p/transact! conn\n               [[:db/add todo-id :todo/is-completed is-completed]]))\n\n(defn update-todo-description [conn todo-id description]\n  (p/transact! conn\n               [[:db/add todo-id :todo/description description]]))\n\n(defn set-edit-status [conn todo-id is-being-edited]\n  (p/transact! conn\n               [[:db/add todo-id :todo/is-being-edited is-being-edited]]))\n\n(defn create-todo [conn]\n  (p/transact! conn [{:todo/description     \"new todo\"\n                      :todo/is-being-edited true\n                      :todo/creation-date   (timestamp)}]))\n\n\n;; VIEWS\n\n(defn todo-view [conn todo-id]\n  (let [todo @(p/pull conn [:todo/description :todo/is-completed :todo/is-being-edited] todo-id)\n        description (:todo/description todo)\n        is-completed (= (:todo/is-completed todo) true)\n        is-being-edited (:todo/is-being-edited todo)]\n    [:div.flex.m-1.items-center\n     {:style {:height \"26px\"}}\n     [:input.mr-2\n      {:type      \"checkbox\"\n       :on-change #(update-todo-status conn todo-id (not is-completed))\n       :checked   is-completed}]\n\n     (if is-being-edited\n       [:input.p-1\n        {:on-change  #(update-todo-description conn todo-id (-> % .-target .-value))\n         :on-blur    #(set-edit-status conn todo-id false)\n         :on-key-up  (fn [evt]\n                       (if (= \"Enter\" (.-key evt))\n                         (set-edit-status conn todo-id false)))\n         :value      description\n         :auto-focus true}]\n       [:div\n        {:on-click #(set-edit-status conn todo-id true)\n         :style    {:text-decoration (if is-completed\n                                       \"line-through\"\n                                       \"inherit\")}}\n        description])]))\n\n\n(defn app [conn]\n  (let [todo-ids (->> @(p/q '[:find ?todo\n                              :in $\n                              :where\n                              [?todo :todo/description _]]\n                            conn)\n                      (sort)\n                      (reverse)\n                      (map first))]\n    [:div.p-10\n\n     [:div.mb-3.flex.items-center.content-start\n      [:h1 \"Todos\"]\n\n      [:button.bg-blue.p-2.rounded.text-white.ml-4\n       {:on-click #(create-todo conn)} \"new\"]]\n\n     (map\n       (fn [todo-id] ^{:key todo-id} [todo-view conn todo-id]) todo-ids)]))\n\n\n;; INITIALIZATION\n\n\n(defn render []\n  (let [container (.getElementById js/document \"app\")]\n    (r/render [app conn] container)))\n\n(defn init! []\n  (p/transact! conn initial-facts)\n  (render))\n\n(defn reload! []\n  (render))\n\n")

